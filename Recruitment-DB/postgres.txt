Create DB:
CREATE DATABASE RECRUITMENT;
\c recruitment

Table APPLICANT:
CREATE TABLE APPLICANT (
    APPNO INT PRIMARY KEY,
    NAME VARCHAR(50),
    DOB DATE,
    GENDER INT,       
    SPLRES INT,       
    TEST INT,         
    INTERVIEW INT,    
    AGGR FLOAT,       
    RND INT,          
    RANK INT,         
    SPLRANK INT       
);

Insert:
INSERT INTO APPLICANT VALUES(55555, 'RAHUL', '12-MAR-2006', 1, 2);
INSERT INTO APPLICANT VALUES(55556, 'JEEVA', '10-APR-2006', 2, 2);
INSERT INTO APPLICANT VALUES (55557, 'SAM', '15-MAY-2006', 2, 2);
INSERT INTO APPLICANT VALUES (55558, 'KAVI', '20-JUN-2006', 1, 2);
INSERT INTO APPLICANT VALUES (55559, 'PRIYA', '25-JUL-2006', 1, 2);
INSERT INTO APPLICANT VALUES (55560, 'ANU', '30-AUG-2006', 2, 2);
INSERT INTO APPLICANT VALUES (55561, 'NANDHINI', '05-SEP-2006', 2, 2);
INSERT INTO APPLICANT VALUES (55562, 'ARUN', '10-OCT-2006', 1, 2);
INSERT INTO APPLICANT VALUES (55563, 'KAVIYA', '15-NOV-2006', 2, 2);
INSERT INTO APPLICANT VALUES (55564, 'VIKRAM', '20-DEC-2006', 1, 2);
INSERT INTO APPLICANT VALUES (55565, 'MEENA', '25-JAN-2009', 2, 2);
INSERT INTO APPLICANT VALUES (55566, 'RAJAN', '30-JAN-2009', 1, 2);
INSERT INTO APPLICANT VALUES (55567, 'GITA', '05-MAR-2009', 2, 2);
INSERT INTO APPLICANT VALUES (55568, 'SHANTHI', '10-APR-2009', 1, 2);
INSERT INTO APPLICANT VALUES (55569, 'VANI', '15-MAY-2009', 2, 1);
INSERT INTO APPLICANT VALUES (55570, 'SURIYA', '20-JUN-2009', 1, 1);
INSERT INTO APPLICANT VALUES (55571, 'DIVYA', '25-JUL-2009', 2, 1);
INSERT INTO APPLICANT VALUES (55572, 'KUMAR', '30-AUG-2009', 1, 1);
INSERT INTO APPLICANT VALUES (55573, 'VISHNU', '05-SEP-2009', 2, 1);
INSERT INTO APPLICANT VALUES (55574, 'SREE', '10-OCT-2009', 2, 1);

Table Random:
CREATE TABLE RANDOM (
    APPNO INT PRIMARY KEY,
    NAME VARCHAR(50),
    RND INT UNIQUE
);

Random Function:
CREATE OR REPLACE FUNCTION populate_rnd()
RETURNS void AS $$
DECLARE
    v_appno INT;
    v_rnd INT;
BEGIN
    FOR v_appno IN (SELECT APPNO FROM APPLICANT) LOOP
        v_rnd := FLOOR(RANDOM() * 10000000);
        -- Ensure the RND is unique
        LOOP
            EXIT WHEN NOT EXISTS (SELECT 1 FROM RANDOM WHERE RND = v_rnd);
            v_rnd := FLOOR(RANDOM() * 10000000);
        END LOOP;
        INSERT INTO RANDOM (APPNO, NAME, RND) VALUES (v_appno, (SELECT NAME FROM APPLICANT WHERE APPNO = v_appno), v_rnd);
    END LOOP;
END;
$$ LANGUAGE plpgsql;

SELECT populate_rnd();

Table Test:
CREATE TABLE TEST (
    APPNO INT PRIMARY KEY,
    NAME VARCHAR(50),
    TEST INT
);

INSERT INTO TEST (APPNO, NAME, TEST) VALUES 
(55555, 'RAHUL', 80),
(55556, 'JEEVA', 77),
(55557, 'SAM', 85),
(55558, 'KAVI', 78),
(55559, 'PRIYA', 82),
(55560, 'ANU', 88),
(55561, 'NANDHINI', 74),
(55562, 'ARUN', 81),
(55563, 'KAVIYA', 79),
(55564, 'VIKRAM', 83),
(55565, 'MEENA', 76),
(55566, 'RAJAN', 89),
(55567, 'GITA', 84),
(55568, 'SHANTHI', 77),
(55569, 'VANI', 80),
(55570, 'SURIYA', 75),
(55571, 'DIVYA', 88),
(55572, 'KUMAR', 82),
(55573, 'VISHNU', 79),
(55574, 'SREE', 85);

Procedure:
CREATE OR REPLACE PROCEDURE populate_test()
LANGUAGE plpgsql AS $$
BEGIN
    UPDATE APPLICANT
    SET TEST = (SELECT TEST.TEST FROM TEST WHERE TEST.APPNO = APPLICANT.APPNO);
END;
$$;

CALL populate_test();

Table Interview:
CREATE TABLE INTERVIEW(APPNO INT PRIMARY KEY, NAME VARCHAR(25), INTERVIEW INT);

INSERT INTO INTERVIEW (APPNO, NAME, INTERVIEW)
VALUES 
(55555, 'RAHUL', 85),
(55556, 'JEEVA', 78),
(55557, 'SAM', 80),
(55558, 'KAVI', 82),
(55559, 'PRIYA', 79),
(55560, 'ANU', 88),
(55561, 'NANDHINI', 75),
(55562, 'ARUN', 81),
(55563, 'KAVIYA', 83),
(55564, 'VIKRAM', 77),
(55565, 'MEENA', 85),
(55566, 'RAJAN', 76),
(55567, 'GITA', 79),
(55568, 'SHANTHI', 82),
(55569, 'VANI', 80),
(55570, 'SURIYA', 78),
(55571, 'DIVYA', 84),
(55572, 'KUMAR', 83),
(55573, 'VISHNU', 77),
(55574, 'SREE', 86);

Procedure:
CREATE OR REPLACE PROCEDURE populate_interview()
LANGUAGE plpgsql AS $$
BEGIN
    UPDATE APPLICANT AS a
    SET INTERVIEW = i.INTERVIEW
    FROM INTERVIEW AS i
    WHERE i.APPNO = a.APPNO;
END;
$$;

CALL populate_interview();

Aggr:
UPDATE APPLICANT
SET AGGR = 0.6 * TEST + 0.4 * INTERVIEW;

Rank Procedure:
CREATE OR REPLACE PROCEDURE generate_rank()
LANGUAGE plpgsql AS $$
BEGIN
    WITH ranked AS (
        SELECT APPNO, RANK() OVER (ORDER BY AGGR DESC) AS rank
        FROM APPLICANT
    )
    UPDATE APPLICANT AS a
    SET RANK = r.rank
    FROM ranked AS r
    WHERE a.APPNO = r.APPNO;
END;
$$;

CALL generate_rank();

Special Rank Procedure:
CREATE OR REPLACE PROCEDURE generate_splrank()
LANGUAGE plpgsql AS $$
BEGIN
    WITH ranked AS (
        SELECT APPNO, RANK() OVER (ORDER BY AGGR DESC, TEST DESC, INTERVIEW DESC, DOB DESC, RND DESC) AS splrank
        FROM APPLICANT
        WHERE SPLRES = 1
    )
    UPDATE APPLICANT AS a
    SET SPLRANK = r.splrank
    FROM ranked AS r
    WHERE a.APPNO = r.APPNO;
END;
$$;

CALL generate_splrank();

Random Function:
CREATE OR REPLACE FUNCTION update_rnd_attribute()
RETURNS void AS $$
BEGIN
    UPDATE APPLICANT AS a
    SET RND = r.RND
    FROM RANDOM AS r
    WHERE a.APPNO = r.APPNO;
END;
$$ LANGUAGE plpgsql;

SELECT update_rnd_attribute();